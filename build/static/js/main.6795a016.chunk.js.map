{"version":3,"sources":["API.ts","aws-exports.js","hooks/CurrentUser.ts","graphql/mutations.ts","hooks/RekognitionWebCam.ts","components/camera/index.tsx","hooks/SubscribeFacility.ts","graphql/subscriptions.ts","components/crowd/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RecordingStatus","ModelAttributeTypes","awsmobile","useCurrentUser","useState","group","setGroup","Auth","currentAuthenticatedUser","then","data","groups","signInUserSession","accessToken","payload","length","catch","err","Error","updateFacility","useRekognitionWebCam","props","targetFacilityId","webCamRef","captureInterval","Number","recordInterval","setRecordInterval","capture","useCallback","current","imageSrc","getScreenshot","file","base64","name","bin","atob","replace","buffer","Uint8Array","i","charCodeAt","File","type","createJpegFile4Base64","Predictions","identify","labels","source","result","person","filter","l","boundingBoxes","numberOfPeople","API","graphql","graphqlOperation","input","id","startRecord","recordingStatus","ACTIVE","window","setInterval","endRecord","clearInterval","INACTIVE","Component","useRef","isRecording","setIsRecording","audio","width","screenshotFormat","ref","screenshotQuality","videoConstraints","facingMode","Button","color","disabled","onClick","Icon","size","useSubscribeFacility","__typename","description","createdAt","updatedAt","facility","setFacility","useEffect","subscription","subscribe","next","value","onUpdateFacility","unsubscribe","facilityName","Segment","Group","Responsive","as","Card","fluid","Image","src","wrapped","ui","Content","Header","Description","extra","Grid","Row","columns","Column","Amplify","configure","awsconfig","addPluggable","AmazonAIPredictionsProvider","withAuthenticator","style","padding","fontSize","fontFamily","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.6795a016.chunk.js","sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n//  This file was automatically generated and should not be edited.\n\nexport type CreateFacilityInput = {\n  id?: string | null,\n  name: string,\n  numberOfPeople: number,\n  description?: string | null,\n  recordingStatus?: RecordingStatus | null,\n};\n\nexport enum RecordingStatus {\n  ACTIVE = \"ACTIVE\",\n  INACTIVE = \"INACTIVE\",\n}\n\n\nexport type ModelFacilityConditionInput = {\n  name?: ModelStringInput | null,\n  numberOfPeople?: ModelIntInput | null,\n  description?: ModelStringInput | null,\n  recordingStatus?: ModelRecordingStatusInput | null,\n  and?: Array< ModelFacilityConditionInput | null > | null,\n  or?: Array< ModelFacilityConditionInput | null > | null,\n  not?: ModelFacilityConditionInput | null,\n};\n\nexport type ModelStringInput = {\n  ne?: string | null,\n  eq?: string | null,\n  le?: string | null,\n  lt?: string | null,\n  ge?: string | null,\n  gt?: string | null,\n  contains?: string | null,\n  notContains?: string | null,\n  between?: Array< string | null > | null,\n  beginsWith?: string | null,\n  attributeExists?: boolean | null,\n  attributeType?: ModelAttributeTypes | null,\n  size?: ModelSizeInput | null,\n};\n\nexport enum ModelAttributeTypes {\n  binary = \"binary\",\n  binarySet = \"binarySet\",\n  bool = \"bool\",\n  list = \"list\",\n  map = \"map\",\n  number = \"number\",\n  numberSet = \"numberSet\",\n  string = \"string\",\n  stringSet = \"stringSet\",\n  _null = \"_null\",\n}\n\n\nexport type ModelSizeInput = {\n  ne?: number | null,\n  eq?: number | null,\n  le?: number | null,\n  lt?: number | null,\n  ge?: number | null,\n  gt?: number | null,\n  between?: Array< number | null > | null,\n};\n\nexport type ModelIntInput = {\n  ne?: number | null,\n  eq?: number | null,\n  le?: number | null,\n  lt?: number | null,\n  ge?: number | null,\n  gt?: number | null,\n  between?: Array< number | null > | null,\n  attributeExists?: boolean | null,\n  attributeType?: ModelAttributeTypes | null,\n};\n\nexport type ModelRecordingStatusInput = {\n  eq?: RecordingStatus | null,\n  ne?: RecordingStatus | null,\n};\n\nexport type Facility = {\n  __typename: \"Facility\",\n  id: string,\n  name: string,\n  numberOfPeople: number,\n  description?: string | null,\n  recordingStatus?: RecordingStatus | null,\n  createdAt: string,\n  updatedAt: string,\n};\n\nexport type UpdateFacilityInput = {\n  id: string,\n  name?: string | null,\n  numberOfPeople?: number | null,\n  description?: string | null,\n  recordingStatus?: RecordingStatus | null,\n};\n\nexport type DeleteFacilityInput = {\n  id: string,\n};\n\nexport type ModelFacilityFilterInput = {\n  id?: ModelIDInput | null,\n  name?: ModelStringInput | null,\n  numberOfPeople?: ModelIntInput | null,\n  description?: ModelStringInput | null,\n  recordingStatus?: ModelRecordingStatusInput | null,\n  and?: Array< ModelFacilityFilterInput | null > | null,\n  or?: Array< ModelFacilityFilterInput | null > | null,\n  not?: ModelFacilityFilterInput | null,\n};\n\nexport type ModelIDInput = {\n  ne?: string | null,\n  eq?: string | null,\n  le?: string | null,\n  lt?: string | null,\n  ge?: string | null,\n  gt?: string | null,\n  contains?: string | null,\n  notContains?: string | null,\n  between?: Array< string | null > | null,\n  beginsWith?: string | null,\n  attributeExists?: boolean | null,\n  attributeType?: ModelAttributeTypes | null,\n  size?: ModelSizeInput | null,\n};\n\nexport type ModelFacilityConnection = {\n  __typename: \"ModelFacilityConnection\",\n  items:  Array<Facility | null >,\n  nextToken?: string | null,\n};\n\nexport type CreateFacilityMutationVariables = {\n  input: CreateFacilityInput,\n  condition?: ModelFacilityConditionInput | null,\n};\n\nexport type CreateFacilityMutation = {\n  createFacility?:  {\n    __typename: \"Facility\",\n    id: string,\n    name: string,\n    numberOfPeople: number,\n    description?: string | null,\n    recordingStatus?: RecordingStatus | null,\n    createdAt: string,\n    updatedAt: string,\n  } | null,\n};\n\nexport type UpdateFacilityMutationVariables = {\n  input: UpdateFacilityInput,\n  condition?: ModelFacilityConditionInput | null,\n};\n\nexport type UpdateFacilityMutation = {\n  updateFacility?:  {\n    __typename: \"Facility\",\n    id: string,\n    name: string,\n    numberOfPeople: number,\n    description?: string | null,\n    recordingStatus?: RecordingStatus | null,\n    createdAt: string,\n    updatedAt: string,\n  } | null,\n};\n\nexport type DeleteFacilityMutationVariables = {\n  input: DeleteFacilityInput,\n  condition?: ModelFacilityConditionInput | null,\n};\n\nexport type DeleteFacilityMutation = {\n  deleteFacility?:  {\n    __typename: \"Facility\",\n    id: string,\n    name: string,\n    numberOfPeople: number,\n    description?: string | null,\n    recordingStatus?: RecordingStatus | null,\n    createdAt: string,\n    updatedAt: string,\n  } | null,\n};\n\nexport type GetFacilityQueryVariables = {\n  id: string,\n};\n\nexport type GetFacilityQuery = {\n  getFacility?:  {\n    __typename: \"Facility\",\n    id: string,\n    name: string,\n    numberOfPeople: number,\n    description?: string | null,\n    recordingStatus?: RecordingStatus | null,\n    createdAt: string,\n    updatedAt: string,\n  } | null,\n};\n\nexport type ListFacilitiesQueryVariables = {\n  filter?: ModelFacilityFilterInput | null,\n  limit?: number | null,\n  nextToken?: string | null,\n};\n\nexport type ListFacilitiesQuery = {\n  listFacilities?:  {\n    __typename: \"ModelFacilityConnection\",\n    items:  Array< {\n      __typename: \"Facility\",\n      id: string,\n      name: string,\n      numberOfPeople: number,\n      description?: string | null,\n      recordingStatus?: RecordingStatus | null,\n      createdAt: string,\n      updatedAt: string,\n    } | null >,\n    nextToken?: string | null,\n  } | null,\n};\n\nexport type OnCreateFacilitySubscription = {\n  onCreateFacility?:  {\n    __typename: \"Facility\",\n    id: string,\n    name: string,\n    numberOfPeople: number,\n    description?: string | null,\n    recordingStatus?: RecordingStatus | null,\n    createdAt: string,\n    updatedAt: string,\n  } | null,\n};\n\nexport type OnUpdateFacilitySubscription = {\n  onUpdateFacility?:  {\n    __typename: \"Facility\",\n    id: string,\n    name: string,\n    numberOfPeople: number,\n    description?: string | null,\n    recordingStatus?: RecordingStatus | null,\n    createdAt: string,\n    updatedAt: string,\n  } | null,\n};\n\nexport type OnDeleteFacilitySubscription = {\n  onDeleteFacility?:  {\n    __typename: \"Facility\",\n    id: string,\n    name: string,\n    numberOfPeople: number,\n    description?: string | null,\n    recordingStatus?: RecordingStatus | null,\n    createdAt: string,\n    updatedAt: string,\n  } | null,\n};\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_cognito_identity_pool_id\": \"us-east-1:0b8c72ab-b3a6-4d5b-bf37-7b4a804cc74c\",\n    \"aws_cognito_region\": \"us-east-1\",\n    \"aws_user_pools_id\": \"us-east-1_anVGui2vK\",\n    \"aws_user_pools_web_client_id\": \"m6hr6vebml108alin2rqog1s7\",\n    \"oauth\": {},\n    \"aws_cognito_username_attributes\": [],\n    \"aws_cognito_social_providers\": [],\n    \"aws_cognito_signup_attributes\": [\n        \"EMAIL\"\n    ],\n    \"aws_cognito_mfa_configuration\": \"OFF\",\n    \"aws_cognito_mfa_types\": [\n        \"SMS\"\n    ],\n    \"aws_cognito_password_protection_settings\": {\n        \"passwordPolicyMinLength\": 8,\n        \"passwordPolicyCharacters\": []\n    },\n    \"aws_cognito_verification_mechanisms\": [\n        \"EMAIL\"\n    ],\n    \"aws_appsync_graphqlEndpoint\": \"https://htza367pjrfdrnutotrhzzghkq.appsync-api.us-east-1.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-1\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-yezgopd35jhwdc3abhx5wdta5a\",\n    \"predictions\": {\n        \"identify\": {\n            \"identifyLabels\": {\n                \"proxy\": false,\n                \"region\": \"us-east-1\",\n                \"defaults\": {\n                    \"type\": \"LABELS\"\n                }\n            }\n        }\n    }\n};\n\n\nexport default awsmobile;\n","import { useState } from 'react';\nimport { Auth } from 'aws-amplify';\n\nconst useCurrentUser = () => {\n  const [group, setGroup] = useState('');\n  Auth.currentAuthenticatedUser()\n    .then(data => {\n      const groups =\n        data.signInUserSession.accessToken.payload['cognito:groups'];\n      setGroup(groups && groups.length === 1 ? groups[0] : '');\n    })\n    .catch(err => {\n      throw new Error(err);\n    });\n\n  return { group };\n};\nexport default useCurrentUser;\n","/* tslint:disable */\n/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const createFacility = /* GraphQL */ `\n  mutation CreateFacility(\n    $input: CreateFacilityInput!\n    $condition: ModelFacilityConditionInput\n  ) {\n    createFacility(input: $input, condition: $condition) {\n      id\n      name\n      numberOfPeople\n      description\n      recordingStatus\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const updateFacility = /* GraphQL */ `\n  mutation UpdateFacility(\n    $input: UpdateFacilityInput!\n    $condition: ModelFacilityConditionInput\n  ) {\n    updateFacility(input: $input, condition: $condition) {\n      id\n      name\n      numberOfPeople\n      description\n      recordingStatus\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const deleteFacility = /* GraphQL */ `\n  mutation DeleteFacility(\n    $input: DeleteFacilityInput!\n    $condition: ModelFacilityConditionInput\n  ) {\n    deleteFacility(input: $input, condition: $condition) {\n      id\n      name\n      numberOfPeople\n      description\n      recordingStatus\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","/* eslint-disable newline-before-return */\nimport { useCallback, useState, RefObject } from 'react';\nimport { API, graphqlOperation, Predictions } from 'aws-amplify';\nimport Webcam from 'react-webcam';\nimport { updateFacility } from '../graphql/mutations';\nimport { UpdateFacilityInput, RecordingStatus } from '../API';\n\ntype Options = {\n  webCamRef: RefObject<Webcam & HTMLVideoElement>;\n  captureInterval: number;\n};\n\nexport const createJpegFile4Base64 = (base64: string, name: string): File => {\n  const bin = atob(base64.replace(/^.*,/, ''));\n  const buffer = new Uint8Array(bin.length);\n  for (let i = 0; i < bin.length; i++) {\n    buffer[i] = bin.charCodeAt(i);\n  }\n\n  return new File([buffer.buffer], name, { type: 'image/jpeg' });\n};\n\nconst useRekognitionWebCam = (props: Options) => {\n  // 実装の簡易化のため、Facility IDには固定値を指定\n  const targetFacilityId = 'b552d748-3667-4be8-b9f7-2795384068bb';\n  const { webCamRef, captureInterval } = props;\n  const [recordInterval, setRecordInterval] = useState(Number);\n  const capture = useCallback(() => {\n    if (webCamRef && webCamRef.current) {\n      const imageSrc = webCamRef.current.getScreenshot();\n      const file = createJpegFile4Base64(imageSrc !== null ? imageSrc : '', '');\n\n      // Rekognitionに画像を送信\n      Predictions.identify({\n        labels: {\n          source: {\n            file\n          },\n          type: 'ALL'\n        }\n      })\n        .then(result => {\n          if (!result || !result.labels) return 0;\n          const person = result.labels.filter(l => l.name === 'Person');\n          return person.length > 0 ? person[0].boundingBoxes.length : 0;\n        })\n        .then(numberOfPeople => {\n          // Rekognitionの結果を元に施設の人数データを更新\n          API.graphql(\n            graphqlOperation(updateFacility, {\n              input: {\n                id: targetFacilityId,\n                numberOfPeople\n              } as UpdateFacilityInput\n            })\n          );\n        })\n        .catch(err => {\n          throw new Error(err);\n        });\n    }\n  }, [webCamRef]);\n\n  const startRecord = () => {\n    // カメラをACTIVEする\n    API.graphql(\n      graphqlOperation(updateFacility, {\n        input: {\n          id: targetFacilityId,\n          recordingStatus: RecordingStatus.ACTIVE\n        } as UpdateFacilityInput\n      })\n    ).then(() => {\n      // 1秒ごとにWebカメラで撮影 & Rekognitionへの送信を開始する\n      setRecordInterval(window.setInterval(capture, captureInterval));\n    });\n  };\n\n  const endRecord = () => {\n    // 定期的な写真撮影を解除する\n    clearInterval(recordInterval);\n    // カメラをINACTIVEにする\n    API.graphql(\n      graphqlOperation(updateFacility, {\n        input: {\n          id: targetFacilityId,\n          recordingStatus: RecordingStatus.INACTIVE\n        } as UpdateFacilityInput\n      })\n    );\n  };\n\n  return { startRecord, endRecord };\n};\nexport default useRekognitionWebCam;\n","/* eslint-disable newline-before-return */\nimport React, { useState, useRef } from 'react';\nimport Webcam from 'react-webcam';\nimport { Button, Icon } from 'semantic-ui-react';\nimport useRekognitionWebCam from '../../hooks/RekognitionWebCam';\n\nconst Component: React.FC = () => {\n  const webCamRef = useRef<Webcam & HTMLVideoElement>(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const { startRecord, endRecord } = useRekognitionWebCam({\n    webCamRef,\n    captureInterval: 1000\n  });\n\n  return (\n    <>\n      <Webcam\n        audio={false}\n        width=\"50%\"\n        screenshotFormat=\"image/png\"\n        ref={webCamRef}\n        screenshotQuality={1}\n        videoConstraints={{\n          facingMode: 'environment'\n        }}\n      />\n      <br />\n      <Button\n        color=\"green\"\n        disabled={isRecording}\n        onClick={() => {\n          setIsRecording(true);\n          startRecord();\n        }}\n      >\n        Start\n      </Button>\n      <Button\n        color=\"purple\"\n        disabled={!isRecording}\n        onClick={() => {\n          setIsRecording(false);\n          endRecord();\n        }}\n      >\n        Stop\n      </Button>\n      {isRecording ? <Icon name=\"record\" size=\"large\" color=\"green\" /> : ''}\n    </>\n  );\n};\n\nexport default Component;\n","import { useState, useEffect } from 'react';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { onUpdateFacility } from '../graphql/subscriptions';\nimport { OnUpdateFacilitySubscription, RecordingStatus } from '../API';\n\ntype Result = {\n  value: {\n    data: OnUpdateFacilitySubscription;\n  };\n};\n\ntype Facility = OnUpdateFacilitySubscription['onUpdateFacility'];\n\nconst useSubscribeFacility = () => {\n  const [facility, setFacility] = useState<Facility>({\n    __typename: 'Facility',\n    id: '',\n    name: '',\n    numberOfPeople: 0,\n    description: '',\n    recordingStatus: RecordingStatus.INACTIVE,\n    createdAt: \"\",\n    updatedAt: \"\"\n  });\n  useEffect(() => {\n    // 施設情報の更新をSubscribe\n    const subscription = API.graphql(\n      graphqlOperation(onUpdateFacility)\n    ).subscribe({\n      next: (result: Result) => {\n        setFacility(result.value.data.onUpdateFacility);\n      }\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  return { facility };\n};\nexport default useSubscribeFacility;\n","/* tslint:disable */\n/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const onCreateFacility = /* GraphQL */ `\n  subscription OnCreateFacility {\n    onCreateFacility {\n      id\n      name\n      numberOfPeople\n      description\n      recordingStatus\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onUpdateFacility = /* GraphQL */ `\n  subscription OnUpdateFacility {\n    onUpdateFacility {\n      id\n      name\n      numberOfPeople\n      description\n      recordingStatus\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onDeleteFacility = /* GraphQL */ `\n  subscription OnDeleteFacility {\n    onDeleteFacility {\n      id\n      name\n      numberOfPeople\n      description\n      recordingStatus\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","import React from 'react';\nimport {\n  Responsive,\n  Grid,\n  Segment,\n  Card,\n  Icon,\n  Image\n} from 'semantic-ui-react';\nimport useSubscribeFacility from '../../hooks/SubscribeFacility';\nimport { RecordingStatus } from '../../API';\n\nconst Component: React.FC = () => {\n  const { facility } = useSubscribeFacility();\n  const numberOfPeople = facility ? facility.numberOfPeople : 0;\n  const recordingStatus = facility\n    ? facility.recordingStatus\n    : RecordingStatus.INACTIVE;\n  const facilityName = facility ? facility.name : '--';\n  const description = facility ? facility.description : '';\n  return (\n    <>\n      <Segment.Group>\n        <Responsive as={Segment}>\n          <Card fluid>\n            {/* 施設の画像には簡易的にAWS Loftの画像を用いています */}\n            <Image\n              src=\"https://d1.awsstatic.com/Startups/Loft%20Photos/tokyo/photo6.0851f9d9db5876b99ac9b7a8dc6adcba15f0f638.jpg\"\n              wrapped\n              ui={false}\n            />\n            <Card.Content>\n              <Card.Header>{facilityName}</Card.Header>\n              <Card.Description>{description}</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n              <Grid>\n                <Grid.Row columns={12}>\n                  <Grid.Column width={5}>\n                    <Icon name=\"user\" />\n                    {numberOfPeople} 人\n                  </Grid.Column>\n                  <Grid.Column width={6}></Grid.Column>\n                  <Grid.Column width={3}>\n                    {recordingStatus === RecordingStatus.ACTIVE ? (\n                      <Icon name=\"record\" color=\"green\" />\n                    ) : (\n                      <Icon name=\"record\" />\n                    )}\n                  </Grid.Column>\n                </Grid.Row>\n              </Grid>\n            </Card.Content>\n          </Card>\n        </Responsive>\n      </Segment.Group>\n    </>\n  );\n};\n\nexport default Component;\n","/* eslint-disable react/jsx-key, react/jsx-props-no-spreading, jsx-a11y/alt-text */\nimport React from \"react\";\nimport Amplify from \"aws-amplify\";\nimport { AmazonAIPredictionsProvider } from \"@aws-amplify/predictions\";\nimport { withAuthenticator } from \"aws-amplify-react\";\nimport awsconfig from \"./aws-exports\";\n\nimport useCurrentUser from \"./hooks/CurrentUser\";\nimport Camera from \"./components/camera\";\nimport Crowd from \"./components/crowd\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nAmplify.configure(awsconfig); // バックエンドの設定を読み込む\nAmplify.addPluggable(new AmazonAIPredictionsProvider());\n\nconst App: React.FC = () => {\n  const { group } = useCurrentUser();\n\n  return (\n    <div style={{ padding: 15 }}>\n      <h1 style={{ fontSize: 24,color: '#565656', fontFamily: 'font-family: Helvetica , \"游ゴシック\", sans-serif;' }}>技術WG - データ利活用チーム Dashboard</h1>\n      {(() => {\n        return group === \"admin\" ? <Camera /> : <Crowd />;\n      })()}\n    </div>\n  );\n};\n\nexport default withAuthenticator(App, true);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}